import t from"node:fs/promises";import e from"fs";import i from"os";import n from"path";import{createFilter as r}from"@rollup/pluginutils";import a from"zlib";import o from"util";import{createPack as s}from"tar-mini";function l(t){return t.length}function u(t,e){let i="function"==typeof e?e(t):e,{dir:r,base:a}=n.parse(t);return i.replace(/\[path\]/,r?r+"/":"").replace(/\[base\]/,a)}function c(t){return/^\\\\\?\\/.test(t)?t:t.replace(/\\/g,"/")}async function p(e){let i=await Promise.all((await t.readdir(e)).map(t=>n.join(e,t))),r=0,a=[];for(;r!==l(i);){let e=i[r],o=await t.stat(e);if(o.isDirectory()){let r=await t.readdir(e);i.push(...r.map(t=>n.join(e,t)))}o.isFile()&&a.push(e),r++}return a}let f=new TextEncoder;function d(t){return"string"==typeof t?f.encode(t):t}async function m(t,e,i){try{return await e(t,i)}catch(t){return Promise.reject(t)}}let h={gzip:{level:a.constants.Z_BEST_COMPRESSION},brotliCompress:{params:{[a.constants.BROTLI_PARAM_QUALITY]:a.constants.BROTLI_MAX_QUALITY}},deflate:{level:a.constants.Z_BEST_COMPRESSION},deflateRaw:{level:a.constants.Z_BEST_COMPRESSION}};function g(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}class y{enqueue(t){this.queue.push(t),this.run()}async run(){for(;this.running<this.maxConcurrent&&this.queue.length;){let t=this.queue.shift();this.running++;try{await t()}catch(t){this.errors.push(t)}finally{this.running--,this.run()}}}async wait(){for(;this.running;)await new Promise(t=>setTimeout(t,0));if(l(this.errors))throw AggregateError(this.errors,"task failed")}constructor(t){g(this,"maxConcurrent",void 0),g(this,"queue",void 0),g(this,"running",void 0),g(this,"errors",void 0),this.maxConcurrent=t,this.queue=[],this.errors=[],this.running=0}}let w="vite:build-import-analysis",b="vite-plugin-compression",v=(()=>{let t=i.cpus()||{length:1};return 1===t.length?10:Math.max(1,t.length-1)})();function O(t){var e;let i=new Set,r=(t,e)=>c(n.resolve(t,e));return(null===(e=t.build.rollupOptions)||void 0===e?void 0:e.output)?(Array.isArray(t.build.rollupOptions.output)?t.build.rollupOptions.output:[t.build.rollupOptions.output]).forEach(e=>{("object"!=typeof e||l(Object.keys(e)))&&i.add(r(t.root,e.dir||t.build.outDir))}):i.add(r(t.root,t.build.outDir)),i}async function P(t,e){let i=t.generateBundle;if("object"==typeof i&&i.handler){let t=i.handler;i.handler=async function(...i){await t.apply(this,i),await e.apply(this,i)}}"function"==typeof i&&(t.generateBundle=async function(...t){await i.apply(this,t),await e.apply(this,t)})}async function j(t,i){let r=!("copyPublicDir"in t.build)||t.build.copyPublicDir;if(t.publicDir&&r&&e.existsSync(t.publicDir)){let e=await p(t.publicDir),r=n.join(t.root,n.relative(t.root,t.publicDir));await Promise.all(e.map(async t=>{let e=c(n.relative(r,t));await i(e,t)}))}}function S(i={}){let r;let{dest:o,gz:l=!1}=i,u=[],p=[],f=[],m=process.cwd(),h=function(){let t=s(),i={dests:[],root:"",gz:!1};return{add:e=>{t.add(d(e.content),{filename:e.filename})},setup:async r=>(Object.assign(i,r),Promise.all(i.dests.map(r=>{let o=c(n.resolve(i.root,r+".tar"+(i.gz?".gz":""))),s=c(n.dirname(o));return i.root!==s&&e.mkdirSync(s,{recursive:!0}),new Promise((n,r)=>{let s=e.createWriteStream(o);if(s.on("error",r),s.on("finish",n),i.gz){t.receiver.pipe(a.createGzip()).pipe(s);return}t.receiver.pipe(s)})}))),done:()=>t.done()}}(),g=new y(v);return{name:"vite-plugin-tarball",enforce:"post",async configResolved(t){if(p.push(...O(t)),m=t.root,f=o?[o]:p,(r=z.getPluginAPI(t.plugins))||await j(t,async t=>{u.push(t)}),!t.plugins.find(t=>t.name===w))throw Error("[vite-plugin-tarball] can't be work in versions lower than vite at 2.0.0");h.setup({dests:f,root:m,gz:l})},async writeBundle(t,e){for(let t in e){let i=e[t];h.add({filename:t,content:"asset"===i.type?i.source:i.code})}},async closeBundle(){for(let e of(!u.length&&r&&r.staticOutputs.size&&u.push(...r.staticOutputs),p))for(let i of u)g.enqueue(async()=>{let r=n.join(e,i),a=await t.readFile(r);h.add({filename:i,content:a})});await g.wait(),h.done()}}}function z(e={}){let{include:i=/\.(html|xml|css|json|js|mjs|svg|yaml|yml|toml)$/,exclude:s,threshold:c=0,algorithm:p="gzip",filename:f,compressionOptions:g,deleteOriginalAssets:S=!1,skipIfLargerOrEqual:B=!0}=e,E=r(i,s),A=[],C=[],R=Object.create(null);R.algorithm="string"==typeof p?function(t){let e=t in a?t:"gzip";return{algorithm:o.promisify(a[e])}}(p).algorithm:p,R.options="function"==typeof p?g:Object.assign(h[p],g),R.filename=null!=f?f:"brotliCompress"===p?"[path][base].br":"[path][base].gz";let _=new y(v),q=async function(t,e){for(let t in e){if(!E(t))continue;let i=e[t],n=d("asset"===i.type?i.source:i.code),r=l(n);r<c||_.enqueue(async()=>{let i=u(t,R.filename),a=await m(n,R.algorithm,R.options);B&&l(a)>=r||((S||t===i)&&Reflect.deleteProperty(e,t),this.emitFile({type:"asset",fileName:i,source:a}))})}await _.wait().catch(this.error)},D={staticOutputs:new Set},I=null,T={name:b,apply:"build",enforce:"post",api:D,options(){let{rollupVersion:t}=this.meta,[e,i]=t.split(".");if(2>=+e&&78>+i){P(I,q);return}T.generateBundle={order:"post",handler:q}},async configResolved(t){if(C.push(...O(t)),await j(t,async t=>{A.push(t)}),!(I=t.plugins.find(t=>t.name===w)))throw Error("[vite-plugin-compression] Can't be work in versions lower than vite at 2.0.0")},async closeBundle(){for(let e of C)for(let i of A)_.enqueue(async()=>{let r=n.join(e,i);if(E(r)||D.staticOutputs.has(i)){let{size:a}=await t.stat(r);if(a<c)D.staticOutputs.has(i)||D.staticOutputs.add(i);else{let a=await t.readFile(r),o=await m(a,R.algorithm,R.options);if(B&&l(o)>=l(a))return;let s=u(i,R.filename);D.staticOutputs.has(s)||D.staticOutputs.add(s);let c=n.join(e,s);S&&c!==r&&await t.rm(r,{recursive:!0,force:!0}),await t.writeFile(c,o)}}else D.staticOutputs.add(i)});await _.wait().catch(t=>t)}};return T}function B(t){return t}z.getPluginAPI=t=>{var e;return null===(e=t.find(t=>t.name===b))||void 0===e?void 0:e.api};export{z as compression,z as default,B as defineCompressionOption,S as tarball};
